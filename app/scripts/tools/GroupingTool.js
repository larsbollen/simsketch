// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.simsketch == null) {
    window.simsketch = {};
  }

  window.simsketch.GroupingTool = (function(_super) {
    __extends(GroupingTool, _super);

    function GroupingTool(paper) {
      this.mouseUp = __bind(this.mouseUp, this);
      this.mouseDrag = __bind(this.mouseDrag, this);
      this.mouseDown = __bind(this.mouseDown, this);
      GroupingTool.__super__.constructor.apply(this, arguments);
      this.paper = paper;
      this.onMouseDown = this.mouseDown;
      this.onMouseDrag = this.mouseDrag;
      this.onMouseUp = this.mouseUp;
    }

    GroupingTool.prototype.mouseDown = function(event) {
      this.groupingPath = new this.paper.Path();
      this.groupingPath.strokeColor = 'black';
      this.groupingPath.dashArray = [10, 12];
      this.groupingPath.add(event.point);
      return this.groupingPath.closed = true;
    };

    GroupingTool.prototype.mouseDrag = function(event) {
      return this.groupingPath.add(event.point);
    };

    GroupingTool.prototype.mouseUp = function(event) {
      var child, group, tempGroupItems, _i, _len, _ref;
      tempGroupItems = [];
      _ref = this.paper.project.activeLayer.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.length === 0) {
          child.remove();
        } else if (child !== this.groupingPath && child instanceof this.paper.Path) {
          if (simsketch.utils.isInside(child, this.groupingPath)) {
            tempGroupItems.push(child);
          }
        }
      }
      if (tempGroupItems.length > 0) {
        group = new this.paper.Group(tempGroupItems);
        group.strokeColor = new paper.Color(Math.random(), Math.random(), Math.random());
      }
      return this.groupingPath.remove();
    };

    return GroupingTool;

  })(paper.Tool);

}).call(this);

/*
//@ sourceMappingURL=GroupingTool.map
*/
