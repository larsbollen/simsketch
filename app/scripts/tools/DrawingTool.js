// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.simsketch == null) {
    window.simsketch = {};
  }

  window.simsketch.DrawingTool = (function(_super) {
    __extends(DrawingTool, _super);

    function DrawingTool(paper) {
      this.mouseUp = __bind(this.mouseUp, this);
      this.mouseDrag = __bind(this.mouseDrag, this);
      this.mouseDown = __bind(this.mouseDown, this);
      DrawingTool.__super__.constructor.apply(this, arguments);
      this.paper = paper;
      this.strokeWidth = 3;
      this.strokeColor = new this.paper.Color(0, 0, 0);
      this.onMouseDown = this.mouseDown;
      this.onMouseDrag = this.mouseDrag;
      this.onMouseUp = this.mouseUp;
    }

    DrawingTool.prototype.mouseDown = function(event) {
      this.path = new this.paper.Path();
      this.path.strokeColor = this.strokeColor;
      this.path.strokeWidth = this.strokeWidth;
      this.path.strokeCap = 'round';
      this.path.strokeJoin = 'join';
      return this.path.add(event.point);
    };

    DrawingTool.prototype.mouseDrag = function(event) {
      return this.path.add(event.point);
    };

    DrawingTool.prototype.mouseUp = function(event) {
      if (this.path.length === 0) {
        return this.path.remove();
      } else {
        return this.path.simplify(10);
      }
    };

    return DrawingTool;

  })(paper.Tool);

}).call(this);

/*
//@ sourceMappingURL=DrawingTool.map
*/
