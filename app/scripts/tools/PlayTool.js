// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.simsketch == null) {
    window.simsketch = {};
  }

  window.simsketch.PlayTool = (function(_super) {
    __extends(PlayTool, _super);

    function PlayTool(drawingID, paper, behaviors) {
      PlayTool.__super__.constructor.apply(this, arguments);
      this.drawingID = drawingID;
      this.paper = paper;
      this.behaviors = behaviors;
    }

    PlayTool.prototype.activate = function() {
      var _this = this;
      PlayTool.__super__.activate.apply(this, arguments);
      return $("#" + this.drawingID).find(".simsketch_behavior").each(function(index, behavior) {
        var behaviorPosition, child, closestChild, distanceToBehavior, minDistance, _i, _len, _ref;
        minDistance = Number.POSITIVE_INFINITY;
        behaviorPosition = new _this.paper.Point(behavior.offsetLeft, behavior.offsetTop);
        console.log(".position: " + behaviorPosition);
        _ref = _this.paper.project.activeLayer.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          distanceToBehavior = behaviorPosition.getDistance(child.getNearestPoint(behaviorPosition));
          if (distanceToBehavior < minDistance) {
            minDistance = distanceToBehavior;
            closestChild = child;
          }
        }
        closestChild.strokeColor = new _this.paper.Color(1, 0, 0);
        return _this.behaviors[$(behavior).attr("data-behaviorID")].setObject(closestChild);
      });
    };

    return PlayTool;

  })(paper.Tool);

}).call(this);

/*
//@ sourceMappingURL=PlayTool.map
*/
